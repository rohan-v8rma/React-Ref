import React from "react";

//! Look through `Class-Stateful-Lifecycle-Comp.js` to under stand the basic syntax of class-based components

// We introduced a new state variable `letter`. The issue with this is we get the logged value of last and current state of `count`, even when it hasn't changed since `componentDidUpdate` is called after every re-render

class componentDidUpdateTest extends React.Component {
    constructor(props) {
        super(props); 
        
        this.state = {
            count: 0,
            letter: 'a'
        }
    }



    generateRandomLetter() {
        return( String.fromCharCode( Math.floor(Math.random() * 26) + 97 ) );
    } 
    
    changeLetter = () => {
        this.setState({
            letter: this.generateRandomLetter()
        })
    }

    incrementCount = () => {
      this.setState((state, props) => ({
        count: state.count + 1,
      }));
    }

    // This lifecycle method is called when the props/state of the component has been updated, and the corresponding re-render has occurred. This is confirmed by the sequence of logs generated by the render() method and this one.
    componentDidUpdate(prevProps, prevState) {
        console.log("componentDidUpdate lifecycle method");

        console.log(`Last count value: ${prevState.count}\nCurrent count value: ${this.state.count}`);
    }


    render() {
        console.log("Render");

        return (<div>
            <p>Count: {this.state.count}</p>            
            <button onClick={() => this.incrementCount()}>Increment count</button>
            <p>Letter: {this.state.letter}</p>            
            <button onClick={() => this.changeLetter()}>Change letter</button>
        </div>)
    }
    
}

export default componentDidUpdateTest